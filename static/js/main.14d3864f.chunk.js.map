{"version":3,"sources":["components/forecast/forecastCard.js","components/forecast/temprature.js","App.js","index.js"],"names":["ForecastCard","tempInfo","useState","weatherPhase","setweatherPhase","temp","humidity","weathermood","name","speed","country","sunrise","sunset","useEffect","date","Date","timeStr","getHours","getMinutes","newDate","rise","className","toLocaleString","Temprature","searchValue","setsearchValue","settempInfo","getWeatherInfo","a","url","fetch","resp","json","data","main","weather","wind","sys","console","log","type","placeholder","autoFocus","id","value","onChange","e","target","onClick","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.14d3864f.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\n\r\nconst ForecastCard = ({ tempInfo }) => {\r\n    const [weatherPhase, setweatherPhase]  =useState(\" \");\r\n\r\n    const {\r\n        temp,\r\n        humidity,\r\n        /* pressure, */\r\n        weathermood,\r\n        name,\r\n        speed,\r\n        country,\r\n        sunrise,\r\n        sunset \r\n    } = tempInfo;\r\n\r\n        useEffect(() => {\r\n            if(weathermood){\r\n                switch (weathermood) {\r\n                    case \"Clouds\": setweatherPhase(\"wi-day-cloudy\");\r\n                        break;\r\n                    case \"Haze\": setweatherPhase(\"wi-day-sunny-overcast\");\r\n                        break;\r\n                    case \"Clear\": setweatherPhase(\"wi-day-sunny\");\r\n                        break;     \r\n                    case \"Rain\": setweatherPhase(\"wi-day-rain\");\r\n                        break;\r\n\r\n                    default:  setweatherPhase(\"wi-day-haze\");\r\n                        break;\r\n                }\r\n            }\r\n         }, [weathermood]);\r\n\r\n\r\n    /* converting time into minutes */\r\n    let sec = sunset;\r\n        let date = new Date(sec * 1000);\r\n        let timeStr = `${date.getHours()} : ${date.getMinutes()}`\r\n    let min = sunrise;\r\n        const newDate = new Date(min * 1000);\r\n        let rise = `${newDate.getHours()} : ${newDate.getMinutes()}` \r\n    return (\r\n        <>\r\n              {/* our Main Temprature card */}\r\n              <article className=\"widget\">\r\n              <div className=\"weatherIcon\">\r\n                  <i className={`wi ${weatherPhase}`}></i>\r\n              </div>\r\n              <div className=\"weatherInfo\">\r\n                  <div className=\"temperature\">\r\n                      <span>{temp}&deg;</span>\r\n                  </div>\r\n                  <div className=\"description\">\r\n                      <div className=\"weatherCondition\">{weathermood}</div>\r\n                      <div className=\"place\">{name} , {country}</div>\r\n                  </div>\r\n              </div>\r\n              <div className=\"date\">{new Date().toLocaleString()}</div>\r\n              \r\n              {/* bottom  section */}\r\n\r\n              <div className=\"extra-temp\">\r\n              <div className=\"temp-info-minmax\">\r\n                  <div className=\"two-sided-section\">\r\n                      <p><i className={\"wi wi-humidity\"}></i></p>\r\n                      <p className=\"extra-info-leftside\">{humidity}<br />Humidity</p>\r\n                  </div>\r\n                  <div className=\"two-sided-section\">\r\n                      <p><i className={\"wi wi-rain\"}></i></p>\r\n                      <p className=\"extra-info-leftside\">{timeStr} <br />sunset</p>\r\n                  </div>\r\n              </div>\r\n              <div className=\"weather-extra-info\">\r\n              <div className=\"two-sided-section\">\r\n              <p><i className={\"wi wi-rain\"}></i></p>\r\n              <p className=\"extra-info-leftside\">{rise}<br />Sunrise</p>\r\n          </div>\r\n          <div className=\"two-sided-section\">\r\n                      <p><i className={\"wi wi-strong-wind\"}></i></p>\r\n                      <p className=\"extra-info-leftside\">{speed} <br />Speed</p>\r\n                  </div>\r\n              </div>\r\n              </div>\r\n          </article>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ForecastCard\r\n","import React, { useState, useEffect } from 'react'\r\nimport './temprature.css'\r\nimport ForecastCard from './forecastCard';\r\n\r\nconst Temprature = () => {\r\n    \r\nconst [searchValue, setsearchValue] = useState(\"Lucknow\");\r\nconst [tempInfo, settempInfo] = useState(\"\"); \r\n\r\nconst getWeatherInfo = async () => {\r\n    try {\r\n        let  url =`https://api.openweathermap.org/data/2.5/weather?q=${searchValue}&units=metric&appid=37cb45e95889899b6d24992ced793945`;\r\n\r\n        const resp = await fetch(url);\r\n        const data = await resp.json();\r\n\r\n        const{ temp, humidity, /* pressure */ }= data.main\r\n        const { main: weathermood } = data.weather[0];\r\n        const { name } = data;\r\n        const { speed } = data.wind;\r\n        const { country, sunset,sunrise } = data.sys;\r\n        \r\n\r\n        const updatedWeatherInfo = {\r\n            temp,\r\n            humidity,\r\n            /* pressure, */\r\n            weathermood,\r\n            name,\r\n            speed,\r\n            country,\r\n            sunrise,\r\n            sunset\r\n        };\r\n        settempInfo(updatedWeatherInfo); \r\n}\r\n    catch(error){\r\n        console.log(error);\r\n    }\r\n};\r\n\r\nuseEffect(() => {\r\n    getWeatherInfo();\r\n}, [] );\r\n\r\n    return (\r\n        <>\r\n            <div className=\"wrap\">\r\n                <div className=\"search\">\r\n                    <input type=\"search\" placeholder=\"search ðŸŒ¦\" autoFocus id=\"search\" className=\"searchTerm\" \r\n                    value={searchValue} \r\n                    onChange={(e) => setsearchValue(e.target.value) } />\r\n                    <button className=\"searchButton\" type=\"button\" onClick={getWeatherInfo}>Search</button>\r\n                </div>\r\n            </div>\r\n\r\n          {/* our main Temprature card */}\r\n          <ForecastCard  tempInfo={ tempInfo }/>\r\n\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nexport default Temprature\r\n","import React from 'react'\nimport Temprature from './components/forecast/temprature'\n\nconst App = () => {\n  return (\n    <div>\n      <Temprature />\n    </div>\n  )\n}\n\nexport default App\n\n","import React from 'react';\nimport ReactDOM from \"react-dom\";\nimport App from './App';\n;\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}